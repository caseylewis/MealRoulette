@page "/mealmixer"
@using MealRoulette.Models
@using MealRoulette.Services
@inject MealRoulette.Services.MealService MealService
@inject NavigationManager Navigation

<h3>Meal Mixer</h3>

<div class="meal-mixer-container">
    <!-- Day & Meal Selector -->
    <section>
        <h4>Select Days & Meals</h4>
        <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
            @foreach (var day in DaysOfWeek)
            {
                <label>
                    <input type="checkbox" checked="@SelectedDays.Contains(day)" @onchange="(e) => OnDayCheckboxChanged(e, day)" /> @day
                </label>
            }
        </div>
        <div style="margin-top: 0.5rem; display: flex; gap: 1rem;">
            @foreach (var mealType in MealTypes)
            {
                <label>
                    <input type="checkbox" checked="@SelectedMealTypes.Contains(mealType)" @onchange="(e) => OnMealTypeCheckboxChanged(e, mealType)" /> @mealType
                </label>
            }
        </div>
    </section>

    <!-- Randomizer Button -->
    <section style="margin-top: 1rem;">
        <button @onclick="RandomizeMeals" class="btn btn-primary">Randomize Meals</button>
        @if (IsRandomizing)
        {
            <span style="margin-left: 1rem;">Mixing...</span>
        }
    </section>

    <!-- Meal Review Section -->
    <section style="margin-top: 2rem;">
        <h4>Weekly Meal Plan</h4>
        @if (WeeklyPlan.Count > 0)
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Day</th>
                        @foreach (var mealType in SelectedMealTypes)
                        {
                            <th>@mealType</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var day in SelectedDays)
                    {
                        <tr>
                            <td>@day</td>
                            @foreach (var mealType in SelectedMealTypes)
                            {
                                <td>
                                    @if (WeeklyPlan.TryGetValue(day, out var mealsForDay) && mealsForDay.TryGetValue(mealType, out var meal) && meal != null)
                                    {
                                        <span>@meal.Name</span>
                                        <button class="btn btn-link btn-sm" @onclick="() => ReplaceMeal(day, mealType)">Re-spin</button>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No plan generated yet.</p>
        }
    </section>

    <!-- Submit Button -->
    <section style="margin-top: 2rem; display:flex; gap: .5rem; align-items:center;">
        <button @onclick="SubmitPlan" class="btn btn-success" disabled="@(WeeklyPlan.Count == 0)">Apply to Current Week</button>
        <button class="btn btn-secondary" @onclick="GoToCurrentWeek">View Current Week</button>
    </section>

    <!-- Grocery List Section -->
    @if (ShowGroceryList)
    {
        <section style="margin-top: 2rem;">
            <h4>Grocery List</h4>
            @if (GroceryList.Count > 0)
            {
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Ingredient</th>
                            <th>Amount</th>
                            <th>Unit</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in GroceryList)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" @bind="item.Value.Checked" />
                                </td>
                                <td>@item.Key.Name</td>
                                <td>@item.Value.TotalAmount</td>
                                <td>@item.Key.Unit</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No grocery items found.</p>
            }
        </section>
    }
</div>

@code {
    private static readonly string[] DaysOfWeek = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    private static readonly string[] MealTypes = new[] { "Breakfast", "Lunch", "Dinner" };

    private List<string> SelectedDays = DaysOfWeek.ToList();
    private List<string> SelectedMealTypes = MealTypes.ToList();
    private Dictionary<string, Dictionary<string, Meal?>> WeeklyPlan = new();
    private bool IsRandomizing = false;
    private bool ShowGroceryList = false;

    private List<Meal> Meals = new();
    private Dictionary<string, int> _mealUsage = new();

    protected override async Task OnInitializedAsync()
    {
        var meals = await MealService.GetMealsAsync();
        Meals = meals ?? new List<Meal>();
    }

    // Grocery list models
    private Dictionary<GroceryListKey, GroceryListItem> GroceryList = new();
    private record GroceryListKey(string Name, string Unit);
    private class GroceryListItem
    {
        public double TotalAmount { get; set; }
        public bool Checked { get; set; } = true;
    }

    private void OnDayCheckboxChanged(ChangeEventArgs e, string day)
    {
        var isChecked = (bool)e.Value;
        if (isChecked && !SelectedDays.Contains(day))
            SelectedDays.Add(day);
        else if (!isChecked && SelectedDays.Contains(day))
            SelectedDays.Remove(day);
    }

    private void OnMealTypeCheckboxChanged(ChangeEventArgs e, string mealType)
    {
        var isChecked = (bool)e.Value;
        if (isChecked && !SelectedMealTypes.Contains(mealType))
            SelectedMealTypes.Add(mealType);
        else if (!isChecked && SelectedMealTypes.Contains(mealType))
            SelectedMealTypes.Remove(mealType);
    }

    private void RandomizeMeals()
    {
        IsRandomizing = true;
        WeeklyPlan.Clear();
        _mealUsage.Clear();
        var rand = new Random();
        foreach (var day in SelectedDays)
        {
            WeeklyPlan[day] = new Dictionary<string, Meal?>();
            foreach (var mealType in SelectedMealTypes)
            {
                WeeklyPlan[day][mealType] = GetRandomMealWithCap(rand, mealType);
            }
        }
        IsRandomizing = false;
        ShowGroceryList = false;
    }

    private Meal? GetRandomMealWithCap(Random rand, string mealType)
    {
        if (Meals.Count == 0) return null;
        IEnumerable<Meal> filteredMeals = mealType switch
        {
            "Breakfast" => Meals.Where(m => m.CanBeBreakfast),
            "Lunch" => Meals.Where(m => m.CanBeLunch),
            "Dinner" => Meals.Where(m => m.CanBeDinner),
            _ => Enumerable.Empty<Meal>()
        };

        var candidates = filteredMeals
            .Where(m => _mealUsage.GetValueOrDefault(m.Name, 0) < (m.MaxTimesPerWeek <= 0 ? 0 : m.MaxTimesPerWeek))
            .ToList();

        if (candidates.Count == 0)
        {
            // No candidate within cap; return null to show '-'
            return null;
        }

        var meal = candidates[rand.Next(candidates.Count)];
        _mealUsage[meal.Name] = _mealUsage.GetValueOrDefault(meal.Name, 0) + 1;
        return meal;
    }

    private void ReplaceMeal(string day, string mealType)
    {
        if (!WeeklyPlan.ContainsKey(day))
        {
            WeeklyPlan[day] = new Dictionary<string, Meal?>();
        }
        if (!WeeklyPlan[day].ContainsKey(mealType))
        {
            WeeklyPlan[day][mealType] = null;
        }
        var current = WeeklyPlan[day][mealType];
        if (current != null)
        {
            // decrement usage of the current one
            var name = current.Name;
            if (_mealUsage.ContainsKey(name) && _mealUsage[name] > 0) _mealUsage[name]--;
        }
        var rand = new Random();
        WeeklyPlan[day][mealType] = GetRandomMealWithCap(rand, mealType);
        StateHasChanged();
    }

    private async Task SubmitPlan()
    {
        BuildGroceryList();
        await PersistCurrentWeekAsync();
        ShowGroceryList = true;
    }

    private void BuildGroceryList()
    {
        GroceryList.Clear();
        foreach (var day in WeeklyPlan.Keys)
        {
            foreach (var mealType in WeeklyPlan[day].Keys)
            {
                var meal = WeeklyPlan[day][mealType];
                if (meal == null) continue;
                foreach (var ingredient in meal.Ingredients)
                {
                    var key = new GroceryListKey(ingredient.Name, ingredient.UnitOfMeasurement);
                    if (!GroceryList.ContainsKey(key))
                    {
                        GroceryList[key] = new GroceryListItem { TotalAmount = ingredient.Amount, Checked = true };
                    }
                    else
                    {
                        GroceryList[key].TotalAmount += ingredient.Amount;
                    }
                }
            }
        }
    }

    private async Task PersistCurrentWeekAsync()
    {
        var plan = new WeeklyPlan
        {
            SelectedDays = SelectedDays.ToList(),
            SelectedMealTypes = SelectedMealTypes.ToList(),
            Entries = new()
        };
        foreach (var day in SelectedDays)
        {
            if (!WeeklyPlan.TryGetValue(day, out var mealsForDay)) continue;
            foreach (var mealType in SelectedMealTypes)
            {
                if (mealsForDay.TryGetValue(mealType, out var meal) && meal != null)
                {
                    plan.Entries.Add(new WeeklyPlanEntry
                    {
                        Day = day,
                        MealType = mealType,
                        MealName = meal.Name
                    });
                }
            }
        }
        await MealService.SaveCurrentWeekAsync(plan);

        // Convert grocery list to storable dictionary
        var grocery = new Dictionary<string, GroceryAggregateItem>();
        foreach (var kvp in GroceryList)
        {
            var key = $"{kvp.Key.Name}|{kvp.Key.Unit}";
            grocery[key] = new GroceryAggregateItem
            {
                Name = kvp.Key.Name,
                Unit = kvp.Key.Unit,
                TotalAmount = kvp.Value.TotalAmount,
                Checked = kvp.Value.Checked
            };
        }
        await MealService.SaveCurrentWeekGroceryAsync(grocery);
    }

    private void GoToCurrentWeek() => Navigation.NavigateTo("/current-week");
}
