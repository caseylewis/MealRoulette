@page "/meals"
@using MealRoulette.Models
@inject NavigationManager Navigation
@inject MealRoulette.Services.MealService MealService

<h3>Meal List</h3>

<button class="btn btn-secondary" @onclick="AddDefaultMeals" style="margin-bottom: 1rem;">Add Default Meals</button>

<div style="display: flex; flex-wrap: wrap; gap: 1.5rem;">
<!-- Each meal needs to be editable. When clicked, it should go to a page that is similar to the AddMealPage, except it allows editing the existing meal, with an option to delete the meal as well. -->
@foreach (var meal in meals)
{
	<div @onclick="() => GoToEditMeal(meal.Name)" style="background: #fff; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.08); padding: 1.5rem; min-width: 260px; max-width: 320px; flex: 1 1 260px; cursor: pointer;">
		<div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 0.5rem;">
			<h4 style="margin: 0; color: #2c3e50;">@meal.Name</h4>
			<span style="background: #e0e7ff; color: #3730a3; border-radius: 8px; padding: 0.25rem 0.75rem; font-size: 0.95em;">🍽️ @meal.MaxTimesPerWeek x/wk</span>
		</div>
		<div style="margin-bottom: 0.5rem; color: #6b7280; font-size: 1em; font-weight: 500;">Ingredients:</div>
		<div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
			@foreach (var ingredient in meal.Ingredients)
			{
				<span style="background: #f3f4f6; color: #374151; border-radius: 6px; padding: 0.25rem 0.75rem; font-size: 0.95em;">@ingredient.Name</span>
			}
		</div>
	</div>
}
</div>

<!-- Floating Add Button -->
<button @onclick="GoToAddMeal" title="Add Meal" style="position: fixed; bottom: 2rem; right: 2rem; width: 56px; height: 56px; border-radius: 50%; background: #6366f1; color: white; border: none; font-size: 2rem; box-shadow: 0 2px 8px rgba(0,0,0,0.18); z-index: 1000;">
    +
</button>

@code {
    private List<Meal> meals = new();
    private bool isAddingDefaults = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await MealService.GetMealsAsync();
        meals = result ?? new List<Meal>();
    }

    private void GoToAddMeal()
    {
        Navigation.NavigateTo("/add-meal");
    }

    private void GoToEditMeal(string mealName)
    {
        Navigation.NavigateTo($"/edit-meal/{Uri.EscapeDataString(mealName)}");
    }

    private async Task AddDefaultMeals()
    {
        isAddingDefaults = true;
        var defaultMeals = MealService.GetDefaultMeals();
        var existingMeals = (await MealService.GetMealsAsync()).Select(m => m.Name).ToHashSet();
        foreach (var meal in defaultMeals)
        {
            if (!existingMeals.Contains(meal.Name))
            {
                await MealService.AddMealAsync(meal, meal.Ingredients);
            }
        }
        var result = await MealService.GetMealsAsync();
        meals = result ?? new List<Meal>();
        isAddingDefaults = false;
        StateHasChanged();
    }
}
