@page "/edit-meal/{MealName}"
@using MealRoulette.Models
@inject NavigationManager Navigation
@inject MealRoulette.Services.MealService MealService

@code {
    [Parameter]
    public string MealName { get; set; }

    private Meal? meal;
    private string mealName = string.Empty;
    private int maxPerWeek = 1;
    private bool canBeBreakfast = false;
    private bool canBeLunch = false;
    private bool canBeDinner = false;
    private List<Ingredient> ingredients = new();
    private static readonly List<string> Units = UnitOfMeasurement.AllUnits.Select(u => u.ShortName).ToList();
    private bool notFound = false;

    protected override async Task OnInitializedAsync()
    {
        meal = await MealService.GetMealByNameAsync(MealName);
        if (meal == null)
        {
            notFound = true;
            return;
        }
        mealName = meal.Name;
        maxPerWeek = meal.MaxTimesPerWeek;
        canBeBreakfast = meal.CanBeBreakfast;
        canBeLunch = meal.CanBeLunch;
        canBeDinner = meal.CanBeDinner;
        ingredients = meal.Ingredients.Select(i => new Ingredient
        {
            Name = i.Name,
            Amount = i.Amount,
            UnitOfMeasurement = i.UnitOfMeasurement
        }).ToList();
    }

    private void AddIngredient()
    {
        ingredients.Add(new Ingredient());
    }

    private void RemoveIngredient(Ingredient ingredient)
    {
        if (ingredients.Count > 1)
            ingredients.Remove(ingredient);
    }

    private async Task UpdateMeal()
    {
        var updatedMeal = new Meal
        {
            Name = mealName,
            MaxTimesPerWeek = maxPerWeek,
            CanBeBreakfast = canBeBreakfast,
            CanBeLunch = canBeLunch,
            CanBeDinner = canBeDinner,
            Ingredients = ingredients.Select(i => new Ingredient
            {
                Name = i.Name,
                Amount = i.Amount,
                UnitOfMeasurement = i.UnitOfMeasurement
            }).ToList()
        };
        await MealService.UpdateMealAsync(updatedMeal);
        Navigation.NavigateTo("/meals", true);
    }

    private async Task DeleteMeal()
    {
        if (meal != null)
        {
            await MealService.DeleteMealAsync(meal);
        }
        Navigation.NavigateTo("/meals", true);
    }
}

@if (notFound)
{
    <h3>Meal not found.</h3>
    <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/meals"))">Back to List</button>
}
else
{
    <h3>Edit Meal</h3>
    <div class="form-group">
        <label>Meal Name:</label>
        <input class="form-control" @bind="mealName" placeholder="Enter meal name" />
    </div>
    <div class="form-group">
        <label>Max Times Per Week:</label>
        <input class="form-control" type="number" @bind="maxPerWeek" min="0" />
    </div>
    <div class="form-group">
        <label>Meal Types:</label>
        <div style="display: flex; gap: 1rem;">
            <label><input type="checkbox" @bind="canBeBreakfast" /> Breakfast</label>
            <label><input type="checkbox" @bind="canBeLunch" /> Lunch</label>
            <label><input type="checkbox" @bind="canBeDinner" /> Dinner</label>
        </div>
    </div>
    <h4>Ingredients</h4>
    @foreach (var ingredient in ingredients)
    {
        <div class="ingredient-row" style="display: flex; gap: 0.5rem; align-items: center; margin-bottom: 0.5rem;">
            <input class="form-control" style="width: 30%;" @bind="ingredient.Name" placeholder="Ingredient name" />
            <input class="form-control" style="width: 20%;" type="number" step="0.01" inputmode="decimal" @bind="ingredient.Amount" placeholder="Amount" />
            <select class="form-control" style="width: 20%;" @bind="ingredient.UnitOfMeasurement">
                @foreach (var unit in Units)
                {
                    <option value="@unit">@unit</option>
                }
            </select>
            <button type="button" class="btn btn-danger" @onclick="@(() => RemoveIngredient(ingredient))">Delete</button>
        </div>
    }
    <button type="button" class="btn btn-secondary" @onclick="AddIngredient">+ Add Ingredient</button>
    <div style="margin-top: 1.5rem; display: flex; gap: 1rem;">
        <button class="btn btn-primary" @onclick="UpdateMeal">Update</button>
        <button class="btn btn-danger" @onclick="DeleteMeal">Delete</button>
        <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/meals"))">Cancel</button>
    </div>
}
